var searchIndex = JSON.parse('{\
"novuskinc":{"doc":"","t":[0,14,0,0,0,0,0,14,0,0,0,0,0,0,14,14,0,0,0,0,0,14,0,0,0,14,3,8,11,11,12,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,11,11,8,6,11,11,0,11,0,7,3,11,11,11,12,11,11,11,11,11,11,11,17,17,5,5,3,8,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,17,17,17,17,17,17,8,11,11,11,11,11,5,17,17,17,3,3,5,11,11,11,11,11,11,5,5,12,5,12,12,11,11,11,11,11,11,11,5,12,11,11,12,5,5,12,12,12,12,11,11,5,11,5,11,11,11,11,11,11,11,0,0,2,4,11,11,11,11,13,13,13,13,13,13,13,11,11,11,13,13,13,13,13,11,11,11,11,3,8,11,11,11,12,11,11,12,11,11,11,11,11,11,11,5,3,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,17,17,17,5,5,5,2,3,11,11,11,11,5,11,11,11,12,11,12,11,12,11,11,11,11,11,11,11,11,17,17,8,11,11,11,8,5,11,11,11,0,17,17],"n":["console","define_kernel_function","drivers","elf","fb","firmware","fs","gen_simpleuart","irq","kernel","keyboard","led","mb","module","module_end","module_init","net","platform","power","prelude","serial","start_module","storage","timer","v4","v4_module_init","KernelConsole","KernelConsoleDriver","borrow","borrow_mut","chars_written","clear_screen","clone","clone_into","dimensions","from","height","into","name","new","new_line","to_owned","try_from","try_into","type_id","update_chars_written","width","write_character","write_string","Driver","DriverResult","driver_name","init","manager","name","names","DRIVER_MANAGER","DeviceDriverManager","add_driver","borrow","borrow_mut","drivers","from","get_driver","into","new","try_from","try_into","type_id","CONSOLE","NONE","load_elf","run_elf","FrameBuffer","FrameBufferGraphics","borrow","borrow_mut","clone","clone_into","empty","fb_addr","fb_size","from","get_graphics","graphics","graphics_pixel","graphics_write","graphics_write_fmt","graphics_write_string","into","name","new","set","to_owned","try_from","try_into","type_id","FMI_RESPONSE_ERROR","FMI_RESPONSE_OTHER","FMI_RESPONSE_SUCCESS","FMI_STATUS_EMPTY","FMI_STATUS_FULL","FMI_STATUS_OTHER","FirmwareInterface","add_index","init","mb_call","name","status","DefaultHandler","IRQH_FAILED","IRQH_NOT_EXISTENT","IRQH_SUCCESS","IrqChip","IrqHandler","add_irq","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","device_irq_handler","device_specific_irqs_init","disable","empty_handler","enable","enabled","eq","eq","fmt","fmt","from","from","get_irqn","handle_irq","handlers","into","into","irq_address","irqchip_init","irqchip_setup","irqh","irqn","irqn","name","ne","ne","notify_irq","set_handler","set_irqchip","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","macros","types","define_kernel_function","KernelFunctionName","borrow","borrow_mut","clone","clone_into","device_init","device_irq_handler","device_specific_irqs_init","device_timer_init","early_device_init","early_serial_init","empty","eq","from","into","irqchip_init","irqchip_setup","led_blink","net_init","set_power_mode","to_owned","try_from","try_into","type_id","Keyboard","KeyboardInput","borrow","borrow_mut","from","input","interrpret_byte","into","name","new","read_buf","read_byte","set_kb_driver","try_from","try_into","type_id","led_blink","MailBox","borrow","borrow_mut","clone","clone_into","empty","fmt","from","into","mb_buffer","new","ptr","to_owned","try_from","try_into","type_id","Device","DeviceIrq","FileSystem","GraphicsDriver","ModuleType","Other","RunDeviceIrqs","StorageDevice","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id","net_init","device_init","early_device_init","PM_REBOOT","PM_SHUTDOWN","PM_SLEEP","reboot","set_power_mode","shutdown","version","SimpleUart","borrow","borrow_mut","clone","clone_into","early_serial_init","empty","fmt","from","input_addr","into","name","new","output_addr","serial_read_byte","serial_write_byte","set_addrs","to_owned","try_from","try_into","type_id","write_str","STORAGE_STATUS_ERR","STORAGE_STATUS_OK","Storage","read_sector","status","write_sector","Timer","device_timer_init","interval","set_value","value","version","MAJOR_VERSION","VERSION_NAME"],"q":["novuskinc","","","","","","","","","","","","","","","","","","","","","","","","","","novuskinc::console","","","","","","","","","","","","","","","","","","","","","","","novuskinc::drivers","","","","","","","novuskinc::drivers::manager","","","","","","","","","","","","","novuskinc::drivers::names","","novuskinc::elf","","novuskinc::fb","","","","","","","","","","","","","","","","","","","","","","","","novuskinc::firmware","","","","","","","","","","","","novuskinc::irq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","novuskinc::kernel","","novuskinc::kernel::macros","novuskinc::kernel::types","","","","","","","","","","","","","","","","","","","","","","","","novuskinc::keyboard","","","","","","","","","","","","","","","","novuskinc::led","novuskinc::mb","","","","","","","","","","","","","","","","novuskinc::module","","","","","","","","","","","","","","","","","","","","novuskinc::net","novuskinc::platform","","novuskinc::power","","","","","","novuskinc::prelude","novuskinc::serial","","","","","","","","","","","","","","","","","","","","","","novuskinc::storage","","","","","","novuskinc::timer","","","","","novuskinc::v4","novuskinc::v4::version",""],"d":["","<code>define_kernel_function</code> is a macro used to define “kernel…","","","","","","","","","","","","","","","","","","","","","","","","","The <code>KernelConsole</code> struct should be used as a field value …","The console driver has to implement <code>KernelConsoleDriver</code> …","","","","The <code>clear_screen</code> function is used to clear the kernel …","","","This should return the <code>width</code> and <code>height</code> field of …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Add the name of the console driver with the console …","The <code>new_line</code> function is used to move to the next line for …","","","","","Updates <code>self.chars_written</code>","","The <code>write_character</code> function is used to write a single …","The <code>write_string</code> function is used to write a string and …","","","The <code>driver_name</code> function should be used to return the …","The init function needs to be used to initialize the …","","The <code>name</code> should return the “type” of driver it is so …","","This is a static that contains all the drivers that Novusk …","<code>DeviceDriverManager</code> is used to manage main device drivers","<code>add_driver</code> is used to add a device driver to the manager, …","","","","Returns the argument unchanged.","The <code>get_driver</code> function returns a device driver. The “…","Calls <code>U::from(self)</code>.","","","","","","","Loads an ELF executable from the given path and returns it…","Run the ELF from it’s entry address (<code>main</code> or <code>_start</code> …","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","This constant is used for unimplemented IRQ handlers.","When an interrupt is invoked the handler function should …","","","","","","","","","","The <code>device_irq_handler</code> function needs to be defined in the …","<code>device_specific_irqs_init</code> is used for initializing IRQs …","","If an IRQ is not implemented this function can be set as …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","<code>irqchip_init</code> is used to initialize the device’s IRQ …","<code>irqchip_setup</code> is used to start setting up the IRQ chip …","","","","","","","The <code>notify_irq</code> function needs to be implemented to tell …","","Sets the <code>IRQCHIP</code> value in <code>irq</code> to <code>Some(chip)</code>, this should …","","","","","","","","","","","The ``KernelFunctionName``` enum is used for defining …","","","","","This function is used to initialize the device Novusk is …","This function is used to handle device specific IRQs that …","This function is used for initializing device specific …","This function is for initializing the device timer. It …","This function is intended for setting some device drivers …","Initializes early serial I/O, it gets called by <code>ArchSetup</code> …","This is an empty function that does nothing, it’s just …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This function is used to initialize the device’s IRQ …","This function is used for setting up the IRQ chip before it…","Turns on an on board led for a certain amount of time.","Initializes ethernet or wireless networking","Used to put the device into a certain power mode depending …","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Turns on an led for <code>sleep</code> seconds or CPU cycles.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","<code>device_init</code> is usually called in <code>setup_arch</code>, this function …","<code>early_device_init</code> is intended for setting device specific …","Reboots the device when used with <code>set_power_mode</code>.","Shutsdown the device when used with <code>set_power_mode</code>.","","","","","","<code>SimpleUart</code> is a serial driver mainly used for early …","","","","","<code>early_serial_init</code> is used to initialize a <code>SimpleUart</code> …","Creates a new <code>SimpleUart</code>","","Returns the argument unchanged.","This address is used for receiving input","Calls <code>U::from(self)</code>.","The name field is for the SimpleUart’s","Creates a new <code>SimpleUart</code>","This address is used for printing","Reads a byte from the <code>input_addr</code> field’s value","Writes a byte to the <code>output_addr</code> field’s value","Set <code>SimpleUart</code> addresses","","","","","","","","A trait for storage device drivers.","Reads a storage sector’s contents.","Returns the status of the storage device, it should return …","Writes to a storage sector.","","<code>device_timer_init</code> is used to initialize the device’s …","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,1,1,2,2,0,0,3,3,0,3,0,0,0,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,6,6,6,6,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,7,7,7,7,7,0,0,0,0,0,0,0,8,9,8,9,8,8,0,0,9,0,9,9,8,9,8,9,8,9,9,0,9,8,9,9,0,0,8,8,9,9,8,9,0,9,0,8,8,9,8,9,8,9,0,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,11,11,11,11,12,11,11,11,12,12,11,11,11,11,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,16,16,16,0,0,17,17,17,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0],["u16",0]]],[[["",0]],["kernelconsole",3]],[[["",0],["",0]]],[[["",0]]],[[]],null,[[]],null,[[["str",0],["u16",0],["u16",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["u64",0]]],null,[[["",0],["char",0],["u16",0],["u16",0]]],[[["",0],["str",0],["u16",0],["u16",0]]],null,null,[[["",0]],["str",0]],[[["",0]],["driverresult",6]],null,[[["",0]],["str",0]],null,null,null,[[["",0],["driver",8]]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],[[["",0],["str",0]],["option",4,[["driver",8]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,[[["u64",0]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["framebuffer",3]],[[["",0],["",0]]],[[]],null,null,[[]],[[["",0]],["framebuffergraphics",8]],null,[[["",0],["u32",0],["u32",0],["u32",0]]],[[["",0],["u8",0],["usize",0],["usize",0]]],[[["",0],["arguments",3]]],[[["",0],["str",0],["usize",0],["usize",0]]],[[]],null,[[]],[[["",0],["str",0],["framebuffergraphics",8]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0],["usize",0],["u32",0]]],[[["",0]]],[[["",0],["u32",0]],["result",4,[["u32",0]]]],[[["",0]],["str",0]],[[["",0]],["u32",0]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["irqhandler",3]],[[["",0],["",0]]],null,null,null,[[],["i16",0]],null,null,[[["",0],["irqhandler",3]],["bool",0]],[[["",0],["irqchip",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["i16",0]],null,null,[[]],[[]],null,null,null,null,null,null,null,[[["",0],["irqhandler",3]],["bool",0]],[[["",0],["irqchip",3]],["bool",0]],null,[[["",0],["irqhandler",3]]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["kernelfunctionname",4]],[[["",0],["",0]]],null,null,null,null,null,null,null,[[["",0],["kernelfunctionname",4]],["bool",0]],[[]],[[]],null,null,null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],null,[[["",0],["u8",0]]],[[]],null,[[["str",0]]],[[["",0],["u8",0]]],[[["",0]],["u8",0]],[[["",0],["keyboardinput",8]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["mailbox",3]],[[["",0],["",0]]],[[]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,[[]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["moduletype",4]],[[["",0],["",0]]],[[["",0],["moduletype",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["simpleuart",3]],[[["",0],["",0]]],null,[[]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[]],null,[[]],null,[[["",0]],["u8",0]],[[["",0],["u8",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["str",0]],["result",6]],null,null,null,[[["",0],["u32",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0],["u32",0]]],null,null,[[["",0]],["u32",0]],[[["",0],["u32",0]]],[[["",0]],["u32",0]],null,null,null],"p":[[3,"KernelConsole"],[8,"KernelConsoleDriver"],[8,"Driver"],[3,"DeviceDriverManager"],[3,"FrameBuffer"],[8,"FrameBufferGraphics"],[8,"FirmwareInterface"],[3,"IrqHandler"],[3,"IrqChip"],[4,"KernelFunctionName"],[3,"Keyboard"],[8,"KeyboardInput"],[3,"MailBox"],[4,"ModuleType"],[3,"SimpleUart"],[8,"Storage"],[8,"Timer"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};